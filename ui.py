import streamlit as st
import joblib
import numpy as np
import pandas as pd
from PIL import Image
import tkinter as tk
from tkinter import filedialog
import google.generativeai as genai
import streamlit.components.v1 as components

# Load models
mlmodel = joblib.load('trained_models/rf_model_all_targets.pkl')
random_forest_model = joblib.load('trained_models/random_forest_model.joblib')
linear_reg_model = joblib.load('trained_models/linear_regression_model.joblib')
def upload_csv():
    """Upload CSV file using tkinter."""
    root = tk.Tk()
    root.withdraw()  # Hide main tkinter window
    file_path = filedialog.askopenfilename(
        title="Select a CSV File",
        filetypes=(("CSV Files", "*.csv"), ("All Files", "*.*"))
    )
    return file_path

# Feature names
feature_names = [
    'market_cap', 'total_revenue', 'cashflow', 'profit_margin',
    'gross_margin', 'total_debt', 'earningsGrowth', 'Gross Profit',
    'Net Income', 'gross_margin', 'profit_margin', 'cashflow', 
    'total_debt', 'totalCash'
]

# Define mappings
genai.configure(api_key="your gemini api key")
model = genai.GenerativeModel("gemini-1.5-flash")

city_mapping = {np.int64(0): 'Aberdeen', np.int64(1): 'Abilene', np.int64(2): 'Abingdon', np.int64(3): 'Acheson', np.int64(4): 'Acton', np.int64(5): 'Addison', np.int64(6): 'Aiken', np.int64(7): 'Airport City', np.int64(8): 'Akron', np.int64(9): 'Alachua', np.int64(10): 'Alajuela', np.int64(11): 'Alameda', np.int64(12): 'Albany', np.int64(13): 'Albemarle', np.int64(14): 'Albuquerque', np.int64(15): 'Aldergrove', np.int64(16): 'Alexandria', np.int64(17): 'Alhambra', np.int64(18): 'Aliso Viejo', np.int64(19): 'Allentown', np.int64(20): 'Allston', np.int64(21): 'Almaty', np.int64(22): 'Alpharetta', np.int64(23): 'American Fork', np.int64(24): 'Ames', np.int64(25): 'Amesbury', np.int64(26): 'Amherst', np.int64(27): 'Amityville', np.int64(28): 'Amsterdam', np.int64(29): 'Anaheim', np.int64(30): 'Anchorage', np.int64(31): 'Andover', np.int64(32): 'Ankeny', np.int64(33): 'Ann Arbor', np.int64(34): 'Annapolis', np.int64(35): 'Anniston', np.int64(36): 'Anoka', np.int64(37): 'Appleton', np.int64(38): 'Archbold', np.int64(39): 'Arlington', np.int64(40): 'Armonk', np.int64(41): 'Armstrong', np.int64(42): 'Ashburn', np.int64(43): 'Asheville', np.int64(44): 'Atchison', np.int64(45): 'Athens', np.int64(46): 'Atlanta', np.int64(47): 'Attleboro', np.int64(48): 'Auburn', np.int64(49): 'Auburn Hills', np.int64(50): 'Audubon', np.int64(51): 'Aurora', np.int64(52): 'Austin', np.int64(53): 'Aventura', np.int64(54): 'Avon Lake', np.int64(55): 'Ayer', np.int64(56): 'Bad Homburg', np.int64(57): 'Bagsvaerd', np.int64(58): 'Bainbridge', np.int64(59): 'Bainbridge Island', np.int64(60): 'Bala Cynwyd', np.int64(61): 'Ball Ground', np.int64(62): 'Ballerup', np.int64(63): 'Ballybrit', np.int64(64): 'Baltimore', np.int64(65): 'Bannockburn', np.int64(66): 'Baoding', np.int64(67): 'Bar Harbor', np.int64(68): 'Barcelona', np.int64(69): 'Barranquilla', np.int64(70): 'Bartlett', np.int64(71): 'Basel', np.int64(72): 'Basildon', np.int64(73): 'Basking Ridge', np.int64(74): 'Bassett', np.int64(75): 'Batavia', np.int64(76): 'Batesville', np.int64(77): 'Baton Rouge', np.int64(78): 'Baudette', np.int64(79): 'Bay Harbor Islands', np.int64(80): 'Bay Shore', np.int64(81): 'Bayonne', np.int64(82): 'Beachwood', np.int64(83): 'Beaumont', np.int64(84): 'Beaverton', np.int64(85): 'Bedford', np.int64(86): 'Bedminster', np.int64(87): 'Beijing', np.int64(88): 'Belgrade', np.int64(89): 'Bellevue', np.int64(90): 'Bellingham', np.int64(91): 'Belmont', np.int64(92): 'Belvidere', np.int64(93): 'Bengaluru', np.int64(94): 'Bensalem', np.int64(95): 'Bensenville', np.int64(96): 'Benton Harbor', np.int64(97): 'Bentonville', np.int64(98): 'Berkeley', np.int64(99): 'Berkeley Heights', np.int64(100): 'Berryville', np.int64(101): 'Berwick', np.int64(102): 'Berwyn', np.int64(103): 'Bethesda', np.int64(104): 'Bethlehem', np.int64(105): 'Beverly', np.int64(106): 'Beverly Hills', np.int64(107): 'Bilbao', np.int64(108): 'Billerica', np.int64(109): 'Billings', np.int64(110): 'Biloxi', np.int64(111): 'Birmingham', np.int64(112): 'Bismarck', np.int64(113): 'Blacksburg', np.int64(114): 'Blairsville', np.int64(115): 'Bloomfield', np.int64(116): 'Bloomfield Hills', np.int64(117): 'Bloomington', np.int64(118): 'Blue Bell', np.int64(119): 'Blue Island', np.int64(120): 'Bluefield', np.int64(121): 'Boca Raton', np.int64(122): 'Bogotá', np.int64(123): 'Bohemia', np.int64(124): 'Boise', np.int64(125): 'Bolingbrook', np.int64(126): 'Bonita Springs', np.int64(127): 'Boston', np.int64(128): 'Boston Heights', np.int64(129): 'Bothell', np.int64(130): 'Boulder', np.int64(131): 'Bowie', np.int64(132): 'Bowling Green', np.int64(133): 'Bozeman', np.int64(134): 'Bradenton', np.int64(135): 'Branchville', np.int64(136): 'Branford', np.int64(137): 'Brea', np.int64(138): 'Brentford', np.int64(139): 'Brentwood', np.int64(140): 'Bridgeview', np.int64(141): 'Bridgeville', np.int64(142): 'Bridgewater', np.int64(143): 'Brisbane', np.int64(144): 'Bristol', np.int64(145): 'Broadview Heights', np.int64(146): 'Brockton', np.int64(147): 'Bronx', np.int64(148): 'Brookfield', np.int64(149): 'Brookings', np.int64(150): 'Brooklyn', np.int64(151): 'Brooklyn Heights', np.int64(152): 'Brookwood', np.int64(153): 'Broomfield', np.int64(154): 'Bryn Mawr', np.int64(155): 'Buena Park', np.int64(156): 'Buenos Aires', np.int64(157): 'Buffalo', np.int64(158): 'Buford', np.int64(159): 'Burbank', np.int64(160): 'Burlingame', np.int64(161): 'Burlington', np.int64(162): 'Burnaby', np.int64(163): 'Burr Ridge', np.int64(164): 'Caesarea', np.int64(165): 'Calabasas', np.int64(166): 'Calgary', np.int64(167): 'Calhoun', np.int64(168): 'Camana Bay', np.int64(169): 'Camarillo', np.int64(170): 'Camas', np.int64(171): 'Cambridge', np.int64(172): 'Camden', np.int64(173): 'Camp Hill', np.int64(174): 'Campbell', np.int64(175): 'Campinas', np.int64(176): 'Canfield', np.int64(177): 'Canonsburg', np.int64(178): 'Canton', np.int64(179): 'Cardiff', np.int64(180): 'Carlsbad', np.int64(181): 'Carmel', np.int64(182): 'Carmichaels', np.int64(183): 'Carnegie', np.int64(184): 'Carpinteria', np.int64(185): 'Carthage', np.int64(186): 'Cary', np.int64(187): 'Castle Rock', np.int64(188): 'Catskill', np.int64(189): 'Cave Creek', np.int64(190): 'Cedar Rapids', np.int64(191): 'Cedarhurst', np.int64(192): 'Celebration', np.int64(193): 'Centennial', np.int64(194): 'Center Valley', np.int64(195): 'Centerville', np.int64(196): 'Central', np.int64(197): 'Central Islip', np.int64(198): 'Cerritos', np.int64(199): 'Chambersburg', np.int64(200): 'Chamblee', np.int64(201): 'Champaign', np.int64(202): 'Chandler', np.int64(203): 'Changzhou', np.int64(204): 'Chanhassen', np.int64(205): 'Chantilly', np.int64(206): 'Chapel Hill', np.int64(207): 'Chapin', np.int64(208): 'Charles Town', np.int64(209): 'Charleston', np.int64(210): 'Charlotte', np.int64(211): 'Charlottesville', np.int64(212): 'Chaska', np.int64(213): 'Chatsworth', np.int64(214): 'Chattanooga', np.int64(215): 'Chelmsford', np.int64(216): 'Chengdu', np.int64(217): 'Chennai', np.int64(218): 'Cheongju-Si', np.int64(219): 'Chesapeake', np.int64(220): 'Chesterbrook', np.int64(221): 'Chesterfield', np.int64(222): 'Chestnut Ridge', np.int64(223): 'Chicago', np.int64(224): 'Chico', np.int64(225): 'Chino', np.int64(226): 'Chu-Nan', np.int64(227): 'Cicero', np.int64(228): 'Cincinnati', np.int64(229): 'Circle Pines', np.int64(230): 'City Of Industry', np.int64(231): 'Claremont', np.int64(232): 'Clarksburg', np.int64(233): 'Clayton', np.int64(234): 'Clearfield', np.int64(235): 'Clearwater', np.int64(236): 'Cleveland', np.int64(237): 'Clinton', np.int64(238): 'Coatesville', np.int64(239): 'Coconut Creek', np.int64(240): 'Coconut Grove', np.int64(241): "Coeur d'Alene", np.int64(242): 'Collierville', np.int64(243): 'Collinsville', np.int64(244): 'Colmar', np.int64(245): 'Colorado Springs', np.int64(246): 'Columbia', np.int64(247): 'Columbus', np.int64(248): 'Columbus Grove', np.int64(249): 'Concord', np.int64(250): 'Concord Township', np.int64(251): 'Conshohocken', np.int64(252): 'Conway', np.int64(253): 'Copenhagen', np.int64(254): 'Coppell', np.int64(255): 'Coral Gables', np.int64(256): 'Coraopolis', np.int64(257): 'Cork', np.int64(258): 'Corning', np.int64(259): 'Corona', np.int64(260): 'Corsicana', np.int64(261): 'Corte Madera', np.int64(262): 'Corydon', np.int64(263): 'Cos Cob', np.int64(264): 'Costa Mesa', np.int64(265): 'Courbevoie', np.int64(266): 'Covington', np.int64(267): 'Cranberry Township', np.int64(268): 'Cranbury', np.int64(269): 'Cranford', np.int64(270): 'Cranston', np.int64(271): 'Crystal Lake', np.int64(272): 'Cullman', np.int64(273): 'Culver City', np.int64(274): 'Cupertino', np.int64(275): 'DFW Airport', np.int64(276): 'Daix', np.int64(277): 'Dallas', np.int64(278): 'Damariscotta', np.int64(279): 'Dana Point', np.int64(280): 'Danbury', np.int64(281): 'Davenport', np.int64(282): 'Davidson', np.int64(283): 'Dayton', np.int64(284): 'Daytona Beach', np.int64(285): 'Dearborn', np.int64(286): 'Deer Park', np.int64(287): 'Deerfield', np.int64(288): 'Deerfield Beach', np.int64(289): 'Defiance', np.int64(290): 'Delaware', np.int64(291): 'Delray Beach', np.int64(292): 'Delta', np.int64(293): 'Denton', np.int64(294): 'Denver', np.int64(295): 'Derby', np.int64(296): 'Deridder', np.int64(297): 'Des Moines', np.int64(298): 'Detroit', np.int64(299): 'Dewitt', np.int64(300): 'Didcot', np.int64(301): 'Dixon', np.int64(302): 'Dodgeville', np.int64(303): 'Dongguan', np.int64(304): 'Dorado', np.int64(305): 'Doral', np.int64(306): 'Dothan', np.int64(307): 'Dover', np.int64(308): 'Downers Grove', np.int64(309): 'Draper', np.int64(310): 'Dublin', np.int64(311): 'Dubuque', np.int64(312): 'Duluth', np.int64(313): 'Dundalk', np.int64(314): 'Dunkirk', np.int64(315): 'Dunmore', np.int64(316): 'Durango', np.int64(317): 'Durbanville', np.int64(318): 'Durham', np.int64(319): 'Düsseldorf', np.int64(320): 'Eagan', np.int64(321): 'Eagle', np.int64(322): 'East Aurora', np.int64(323): 'East Rutherford', np.int64(324): 'East Windsor', np.int64(325): 'Easton', np.int64(326): 'Eatontown', np.int64(327): 'Eau Claire', np.int64(328): 'Eden Prairie', np.int64(329): 'Edgewood', np.int64(330): 'Edina', np.int64(331): 'Edinburg', np.int64(332): 'Edinburgh', np.int64(333): 'Edison', np.int64(334): 'Edmonton', np.int64(335): 'Effingham', np.int64(336): 'Egham', np.int64(337): 'Eindhoven', np.int64(338): 'El Cajon', np.int64(339): 'El Dorado', np.int64(340): 'El Monte', np.int64(341): 'El Paso', np.int64(342): 'El Segundo', np.int64(343): 'Electra', np.int64(344): 'Elgin', np.int64(345): 'Elk City', np.int64(346): 'Elk Grove Village', np.int64(347): 'Elkhart', np.int64(348): 'Elkhorn', np.int64(349): 'Elmira', np.int64(350): 'EmeryVille', np.int64(351): 'Emeryville', np.int64(352): 'Encino', np.int64(353): 'Englewood', np.int64(354): 'Englewood Cliffs', np.int64(355): 'Ephrata', np.int64(356): 'Escondido', np.int64(357): 'Espoo', np.int64(358): 'Estero', np.int64(359): 'Euclid', np.int64(360): 'Eugene', np.int64(361): 'Eureka', np.int64(362): 'Evanston', np.int64(363): 'Evansville', np.int64(364): 'Evendale', np.int64(365): 'Everett', np.int64(366): 'Ewing', np.int64(367): 'Exton', np.int64(368): 'Fair Lawn', np.int64(369): 'Fairfax', np.int64(370): 'Fairfield', np.int64(371): 'Fairhaven', np.int64(372): 'Fairmont', np.int64(373): 'Fairport', np.int64(374): 'Falls Church', np.int64(375): 'Fargo', np.int64(376): 'Farmingdale', np.int64(377): 'Farmington', np.int64(378): 'Fayetteville', np.int64(379): 'Feltham', np.int64(380): 'Fergus Falls', np.int64(381): 'Findlay', np.int64(382): 'Fishers', np.int64(383): 'Fitzgerald', np.int64(384): 'Fitzroy', np.int64(385): 'Florham Park', np.int64(386): 'Flower Mound', np.int64(387): 'Floyd', np.int64(388): 'Flushing', np.int64(389): 'Fo Tan', np.int64(390): 'Foothill Ranch', np.int64(391): 'Forest Park', np.int64(392): 'Fort Collins', np.int64(393): 'Fort Lauderdale', np.int64(394): 'Fort Lee', np.int64(395): 'Fort Mill', np.int64(396): 'Fort Myers', np.int64(397): 'Fort Pierce', np.int64(398): 'Fort Smith', np.int64(399): 'Fort Washington', np.int64(400): 'Fort Wayne', np.int64(401): 'Fort Worth', np.int64(402): 'Foster City', np.int64(403): 'Fountain Hills', np.int64(404): 'Fountain Valley', np.int64(405): 'Framingham', np.int64(406): 'Frankfurt am Main', np.int64(407): 'Franklin', np.int64(408): 'Franklin Lakes', np.int64(409): 'Frederick', np.int64(410): 'Freehold', np.int64(411): 'Fremont', np.int64(412): 'Fresno', np.int64(413): 'Friedberg', np.int64(414): 'Friendswood', np.int64(415): 'Frisco', np.int64(416): 'Gainesville', np.int64(417): 'Gaithersburg', np.int64(418): 'Gallipolis', np.int64(419): 'Galway', np.int64(420): 'Garden City', np.int64(421): 'Gardena', np.int64(422): 'Gardner', np.int64(423): 'Garland', np.int64(424): 'Geneva', np.int64(425): 'George Town', np.int64(426): 'Germantown', np.int64(427): 'Gettysburg', np.int64(428): 'Givatayim', np.int64(429): 'Glen Allen', np.int64(430): 'Glen Burnie', np.int64(431): 'Glen Mills', np.int64(432): 'Glendale', np.int64(433): 'Glens Falls', np.int64(434): 'Glenview', np.int64(435): 'Glenville', np.int64(436): 'Glyfada', np.int64(437): 'Golden', np.int64(438): 'Golden Valley', np.int64(439): 'Goleta', np.int64(440): 'Gonzales', np.int64(441): 'Goodlettsville', np.int64(442): 'Goose Creek', np.int64(443): 'Grand Cayman', np.int64(444): 'Grand Forks', np.int64(445): 'Grand Rapids', np.int64(446): 'Grant-Valkaria', np.int64(447): 'Grants Pass', np.int64(448): 'Grapevine', np.int64(449): 'Great Neck', np.int64(450): 'Greeley', np.int64(451): 'Green Bay', np.int64(452): 'Greeneville', np.int64(453): 'Greenfield', np.int64(454): 'Greensboro', np.int64(455): 'Greenville', np.int64(456): 'Greenwich', np.int64(457): 'Greenwood Village', np.int64(458): 'Greer', np.int64(459): 'Grosse Pointe Farms', np.int64(460): 'Guadalajara', np.int64(461): 'Guangzhou', np.int64(462): 'Guilford', np.int64(463): 'Gulfport', np.int64(464): 'Hackensack', np.int64(465): 'Haifa', np.int64(466): 'Haikou', np.int64(467): 'Halifax', np.int64(468): 'Haltom City', np.int64(469): 'Hamden', np.int64(470): 'Hamilton', np.int64(471): 'Hammond', np.int64(472): 'Hampstead', np.int64(473): 'Hampton', np.int64(474): 'Hangzhou', np.int64(475): 'Hangzhou City', np.int64(476): 'Hanover', np.int64(477): 'Hanzhong', np.int64(478): 'Harbin', np.int64(479): 'Harrisburg', np.int64(480): 'Hartford', np.int64(481): 'Hartsville', np.int64(482): 'Harvard', np.int64(483): 'Harvey', np.int64(484): 'Hato Rey', np.int64(485): 'Hattiesburg', np.int64(486): 'Hauppauge', np.int64(487): 'Haverford', np.int64(488): 'Havertown', np.int64(489): 'Hawthorne', np.int64(490): 'Hayward', np.int64(491): 'Hazard', np.int64(492): 'Helena', np.int64(493): 'Hellerup', np.int64(494): 'Henderson', np.int64(495): 'Hercules', np.int64(496): 'Herndon', np.int64(497): 'Hershey', np.int64(498): 'Herzliya', np.int64(499): 'Herzliya Pituach', np.int64(500): 'Hicksville', np.int64(501): 'High Point', np.int64(502): 'Highland Hills', np.int64(503): 'Highlands Ranch', np.int64(504): 'Hilliard', np.int64(505): 'Hills', np.int64(506): 'Hillsboro', np.int64(507): 'Hillside', np.int64(508): 'Hoboken', np.int64(509): 'Hod HaSharon', np.int64(510): 'Hod Hasharon', np.int64(511): 'Hohhot', np.int64(512): 'Hollister', np.int64(513): 'Holliston', np.int64(514): 'Hollywood', np.int64(515): 'Holmdel', np.int64(516): 'Holon', np.int64(517): 'Honaker', np.int64(518): 'Honesdale', np.int64(519): 'Hong Kong', np.int64(520): 'Honolulu', np.int64(521): 'Hoofddorp', np.int64(522): 'Hopkins', np.int64(523): 'Hoquiam', np.int64(524): 'Horsham', np.int64(525): 'Houston', np.int64(526): 'Humble', np.int64(527): 'Hunt Valley', np.int64(528): 'Huntersville', np.int64(529): 'Huntington', np.int64(530): 'Huntington Beach', np.int64(531): 'Huntsville', np.int64(532): 'Idaho Falls', np.int64(533): 'Incline Village', np.int64(534): 'Independence', np.int64(535): 'Indiana', np.int64(536): 'Indianapolis', np.int64(537): 'Inver Grove Heights', np.int64(538): 'Iowa City', np.int64(539): 'Irvine', np.int64(540): 'Irving', np.int64(541): 'Iselin', np.int64(542): 'Island Park', np.int64(543): 'Issaquah', np.int64(544): 'Issy-les-Moulineaux', np.int64(545): 'Istanbul', np.int64(546): 'Itasca', np.int64(547): 'Ithaca', np.int64(548): 'Jacksboro', np.int64(549): 'Jackson', np.int64(550): 'Jacksonville', np.int64(551): 'Jamaica', np.int64(552): 'Jasper', np.int64(553): 'Jefferson City', np.int64(554): 'Jeffersonville', np.int64(555): 'Jericho', np.int64(556): 'Jersey City', np.int64(557): 'Jerusalem', np.int64(558): "Ji'An", np.int64(559): 'Jingzhou', np.int64(560): 'Johannesburg', np.int64(561): 'Johns Creek', np.int64(562): 'Johnstown', np.int64(563): 'Juno Beach', np.int64(564): 'Jupiter', np.int64(565): 'Jurupa Valley', np.int64(566): 'Kailua-Kona', np.int64(567): 'Kalispell', np.int64(568): 'Kansas City', np.int64(569): 'Karmiel', np.int64(570): 'Katy', np.int64(571): 'Kearney', np.int64(572): 'Kelowna', np.int64(573): 'Kennesaw', np.int64(574): 'Kennett Square', np.int64(575): 'Kennewick', np.int64(576): 'Kenosha', np.int64(577): 'Kfar Saba', np.int64(578): 'Kilgore', np.int64(579): 'Kimball', np.int64(580): 'Kinderhook', np.int64(581): 'King of Prussia', np.int64(582): 'Kingsport', np.int64(583): 'Kingston', np.int64(584): 'Kirkland', np.int64(585): 'Kissimmee', np.int64(586): 'Knoxville', np.int64(587): 'Kokomo', np.int64(588): 'Kowloon', np.int64(589): 'Kowloon Bay', np.int64(590): 'Kuala Lumpur', np.int64(591): 'La Jolla', np.int64(592): 'La Mesa', np.int64(593): 'LaFox', np.int64(594): 'Ladera Ranch', np.int64(595): 'Lafayette', np.int64(596): 'Laguna Hills', np.int64(597): 'Lahaina', np.int64(598): 'Lake Barrington', np.int64(599): 'Lake Charles', np.int64(600): 'Lake Forest', np.int64(601): 'Lake Mary', np.int64(602): 'Lake Oswego', np.int64(603): 'Lake Success', np.int64(604): 'Lake Zurich', np.int64(605): 'Lakewood', np.int64(606): 'Lancaster', np.int64(607): 'Langhorne', np.int64(608): 'Lansing', np.int64(609): 'Laredo', np.int64(610): 'Largo', np.int64(611): 'Las Vegas', np.int64(612): 'Latham', np.int64(613): 'Lausanne', np.int64(614): 'Laval', np.int64(615): 'Lead', np.int64(616): 'Leamington', np.int64(617): 'Leawood', np.int64(618): 'Lebanon', np.int64(619): 'Lebec', np.int64(620): 'Lehi', np.int64(621): 'Lenexa', np.int64(622): 'Leuven', np.int64(623): 'Lewisville', np.int64(624): 'Lexington', np.int64(625): 'Liberty', np.int64(626): 'Liberty Lake', np.int64(627): 'Limassol', np.int64(628): 'Lincoln', np.int64(629): 'Lincolnshire', np.int64(630): 'Lindon', np.int64(631): 'Lishui', np.int64(632): 'Lisle', np.int64(633): 'Little Elm', np.int64(634): 'Little River', np.int64(635): 'Little Rock', np.int64(636): 'Littleton', np.int64(637): 'Livermore', np.int64(638): 'Livonia', np.int64(639): 'Lodi', np.int64(640): 'Lombard', np.int64(641): 'London', np.int64(642): 'Long Beach', np.int64(643): 'Long Island City', np.int64(644): 'Longboat Key', np.int64(645): 'Longmont', np.int64(646): 'Longview', np.int64(647): 'Los Angeles', np.int64(648): 'Los Gatos', np.int64(649): 'Loudon', np.int64(650): 'Louisville', np.int64(651): 'Loveland', np.int64(652): 'Lowell', np.int64(653): 'Lubbock', np.int64(654): 'Luxembourg', np.int64(655): 'Luxembourg City', np.int64(656): 'Lvliang', np.int64(657): 'Lynchburg', np.int64(658): 'Lynnwood', np.int64(659): 'Macon', np.int64(660): 'Madison', np.int64(661): 'Madrid', np.int64(662): 'Mahwah', np.int64(663): 'Mainz', np.int64(664): 'Makati City', np.int64(665): 'Malibu', np.int64(666): 'Malvern', np.int64(667): 'Manalapan', np.int64(668): 'Manchester', np.int64(669): 'Manhattan', np.int64(670): 'Manhattan Beach', np.int64(671): 'Manitowoc', np.int64(672): 'Mannheim', np.int64(673): 'Mansfield', np.int64(674): 'Maple Plain', np.int64(675): 'Maranello', np.int64(676): 'Marietta', np.int64(677): 'Markham', np.int64(678): 'Marlborough', np.int64(679): 'Marousi', np.int64(680): 'Martins Ferry', np.int64(681): 'Martinsville', np.int64(682): 'Marysville', np.int64(683): 'Mason', np.int64(684): 'Matawan', np.int64(685): 'Mattoon', np.int64(686): 'Maumee', np.int64(687): 'Mayfield', np.int64(688): 'Mayfield Heights', np.int64(689): 'Mayfield Village', np.int64(690): 'McKinney', np.int64(691): 'McLean', np.int64(692): 'Mechanicsburg', np.int64(693): 'Mechanicsville', np.int64(694): 'Mechelen', np.int64(695): 'Medford', np.int64(696): 'Medina', np.int64(697): 'Meishan', np.int64(698): 'Melbourne', np.int64(699): 'Melville', np.int64(700): 'Memphis', np.int64(701): 'Menashe', np.int64(702): 'Menlo Park', np.int64(703): 'Menomonee Falls', np.int64(704): 'Mentor', np.int64(705): 'Merriam', np.int64(706): 'Merrillville', np.int64(707): 'Merrimack', np.int64(708): 'Merritt Island', np.int64(709): 'Mesa', np.int64(710): 'Mettawa', np.int64(711): 'Miami', np.int64(712): 'Miami Beach', np.int64(713): 'Miami Lakes', np.int64(714): 'Michigan City', np.int64(715): 'Middlefield', np.int64(716): 'Middleton', np.int64(717): 'Middletown', np.int64(718): 'Midland', np.int64(719): 'Midlothian', np.int64(720): 'Midvale', np.int64(721): 'Mifflintown', np.int64(722): 'Migdal Haemek', np.int64(723): 'Milford', np.int64(724): 'Mill Valley', np.int64(725): 'Millbrook', np.int64(726): 'Millersburg', np.int64(727): 'Milpitas', np.int64(728): 'Milwaukee', np.int64(729): 'Mineola', np.int64(730): 'Minerva', np.int64(731): 'Minneapolis', np.int64(732): 'Minnetonka', np.int64(733): 'Minot', np.int64(734): 'Miramar', np.int64(735): 'Mississauga', np.int64(736): 'Mitchel Field', np.int64(737): 'Mobile', np.int64(738): 'Mocksville', np.int64(739): 'Moline', np.int64(740): 'Monaco', np.int64(741): 'Mondovi', np.int64(742): 'Monett', np.int64(743): 'Monroe', np.int64(744): 'Monroe Township', np.int64(745): 'Monrovia', np.int64(746): 'Mont-Saint-Guibert', np.int64(747): 'Montevideo', np.int64(748): 'Montreal', np.int64(749): 'Montvale', np.int64(750): 'Mooresville', np.int64(751): 'Morristown', np.int64(752): 'Morrisville', np.int64(753): 'Morton Grove', np.int64(754): 'Mount Airy', np.int64(755): 'Mount Horeb', np.int64(756): 'Mount Kisco', np.int64(757): 'Mount Laurel', np.int64(758): 'Mount Pleasant', np.int64(759): 'Mount Royal', np.int64(760): 'Mountain View', np.int64(761): 'Mountlake Terrace', np.int64(762): 'Mt. Olive', np.int64(763): 'Mumbai', np.int64(764): 'Muncie', np.int64(765): 'Munster', np.int64(766): 'Murarrie', np.int64(767): 'Murfreesboro', np.int64(768): 'Murray', np.int64(769): 'Muscatine', np.int64(770): 'Nanjing', np.int64(771): 'Napa', np.int64(772): 'Naperville', np.int64(773): 'Naples', np.int64(774): 'Nashua', np.int64(775): 'Nashville', np.int64(776): 'Nassau', np.int64(777): 'Natick', np.int64(778): 'Needham', np.int64(779): 'Neenah', np.int64(780): 'Nelsonville', np.int64(781): 'Ness Ziona', np.int64(782): 'Netanya', np.int64(783): 'New Albany', np.int64(784): 'New Braunfels', np.int64(785): 'New Brighton', np.int64(786): 'New Britain', np.int64(787): 'New Brunswick', np.int64(788): 'New Canaan', np.int64(789): 'New Century', np.int64(790): 'New City', np.int64(791): 'New Hartford', np.int64(792): 'New Haven', np.int64(793): 'New Hope', np.int64(794): 'New Orleans', np.int64(795): 'New Port Richey', np.int64(796): 'New Prague', np.int64(797): 'New Taipei City', np.int64(798): 'New Ulm', np.int64(799): 'New York', np.int64(800): 'Newark', np.int64(801): 'Newburyport', np.int64(802): 'Newport', np.int64(803): 'Newport Beach', np.int64(804): 'Newport News', np.int64(805): 'Newton', np.int64(806): 'Newtown', np.int64(807): 'Ningbo', np.int64(808): 'Norcross', np.int64(809): 'Norfolk', np.int64(810): 'North Andover', np.int64(811): 'North Bethesda', np.int64(812): 'North Brunswick', np.int64(813): 'North Canton', np.int64(814): 'North Charleston', np.int64(815): 'North Chicago', np.int64(816): 'North Liberty', np.int64(817): 'North Little Rock', np.int64(818): 'North Miami', np.int64(819): 'North Plains', np.int64(820): 'North Reading', np.int64(821): 'North Tonawanda', np.int64(822): 'Northborough', np.int64(823): 'Northbrook', np.int64(824): 'Northvale', np.int64(825): 'Northville', np.int64(826): 'Norton', np.int64(827): 'Norwalk', np.int64(828): 'Norwell', np.int64(829): 'Norwich', np.int64(830): 'Norwood', np.int64(831): 'Novato', np.int64(832): 'Novi', np.int64(833): 'Oak Brook', np.int64(834): 'Oakdale', np.int64(835): 'Oakland', np.int64(836): 'Oaks', np.int64(837): 'Oakville', np.int64(838): 'Ocala', np.int64(839): 'Ocoee', np.int64(840): 'Oklahoma City', np.int64(841): 'Old Bethpage', np.int64(842): 'Old Bridge', np.int64(843): 'Old Greenwich', np.int64(844): 'Oldsmar', np.int64(845): 'Olivette', np.int64(846): 'Olney', np.int64(847): 'Olympia', np.int64(848): 'Omaha', np.int64(849): 'Omer', np.int64(850): 'Ontario', np.int64(851): 'Ooltewah', np.int64(852): 'Opelousas', np.int64(853): 'Orange', np.int64(854): 'Orem', np.int64(855): 'Orinda', np.int64(856): 'Orlando', np.int64(857): 'Ormond Beach', np.int64(858): 'Orrville', np.int64(859): 'Osceola', np.int64(860): 'Oshkosh', np.int64(861): 'Oswego', np.int64(862): 'Ottawa', np.int64(863): 'Overland Park', np.int64(864): 'Owings Mills', np.int64(865): 'Oxford', np.int64(866): 'Oxnard', np.int64(867): 'Pacific Palisades', np.int64(868): 'Palatine', np.int64(869): 'Palm Beach Gardens', np.int64(870): 'Palm Desert', np.int64(871): 'Palo Alto', np.int64(872): 'Palos Hills', np.int64(873): 'Panama City', np.int64(874): 'Panama City Beach', np.int64(875): 'Paramount', np.int64(876): 'Paramus', np.int64(877): 'Paris', np.int64(878): 'Park City', np.int64(879): 'Parsippany', np.int64(880): 'Pasadena', np.int64(881): 'Pawtucket', np.int64(882): 'Peachtree Corners', np.int64(883): 'Pekin', np.int64(884): 'Pembroke', np.int64(885): 'Pennsauken', np.int64(886): 'Peoria', np.int64(887): 'Perrysburg', np.int64(888): 'Perth', np.int64(889): 'Petah Tikva', np.int64(890): 'Petaling Jaya', np.int64(891): 'Philadelphia', np.int64(892): 'Phoenix', np.int64(893): 'Pikeville', np.int64(894): 'Pine Bluff', np.int64(895): 'Pine Mountain', np.int64(896): 'Piombino Dese', np.int64(897): 'Piraeus', np.int64(898): 'Pittsburgh', np.int64(899): 'Pittsford', np.int64(900): 'Plainview', np.int64(901): 'Planegg', np.int64(902): 'Plano', np.int64(903): 'Plantation', np.int64(904): 'Pleasanton', np.int64(905): 'Pleasantville', np.int64(906): 'Plymouth', np.int64(907): 'Plymouth Meeting', np.int64(908): 'Pompano Beach', np.int64(909): 'Ponte Vedra', np.int64(910): 'Pontiac', np.int64(911): 'Poplar Bluff', np.int64(912): 'Port Angeles', np.int64(913): 'Port Washington', np.int64(914): 'Portage', np.int64(915): 'Porterville', np.int64(916): 'Portland', np.int64(917): 'Portsmouth', np.int64(918): 'Potomac', np.int64(919): 'Poughkeepsie', np.int64(920): 'Poway', np.int64(921): 'Prattville', np.int64(922): 'Princeton', np.int64(923): 'Princeton Junction', np.int64(924): 'Providence', np.int64(925): 'Provo', np.int64(926): 'Punta Gorda', np.int64(927): 'Purchase', np.int64(928): 'Putrajaya', np.int64(929): 'Quakertown', np.int64(930): 'Quincy', np.int64(931): "Ra'anana", np.int64(932): 'Racine', np.int64(933): 'Radnor', np.int64(934): 'Rahway', np.int64(935): 'Raleigh', np.int64(936): 'Ramat Gan', np.int64(937): 'Ramsey', np.int64(938): 'Rancho Cordova', np.int64(939): 'Rancho Cucamonga', np.int64(940): 'Randolph', np.int64(941): 'Rapid City', np.int64(942): 'Reading', np.int64(943): 'Red Bank', np.int64(944): 'Redmond', np.int64(945): 'Redwood City', np.int64(946): 'Rehovot', np.int64(947): 'Reno', np.int64(948): 'Renton', np.int64(949): 'Research Triangle Park', np.int64(950): 'Reston', np.int64(951): 'Reynoldsburg', np.int64(952): 'Richardson', np.int64(953): 'Richfield', np.int64(954): 'Richland', np.int64(955): 'Richmond', np.int64(956): 'Ridgefield', np.int64(957): 'Ridgefield Park', np.int64(958): 'Ridgeland', np.int64(959): 'Rio De Janeiro', np.int64(960): 'Rishon LeZion', np.int64(961): 'Riverside', np.int64(962): 'Riverwoods', np.int64(963): 'Roanoke', np.int64(964): 'Rochester', np.int64(965): 'Rochester Hills', np.int64(966): 'Rock Hill', np.int64(967): 'Rock Island', np.int64(968): 'Rockaway', np.int64(969): 'Rockford', np.int64(970): 'Rockland', np.int64(971): 'Rockledge', np.int64(972): 'Rockville', np.int64(973): 'Rogers', np.int64(974): 'Rolle', np.int64(975): 'Rolling Meadows', np.int64(976): 'Romeoville', np.int64(977): 'Rosario', np.int64(978): 'Roseland', np.int64(979): 'Rosemead', np.int64(980): 'Rosemont', np.int64(981): 'Roseville', np.int64(982): 'Rosh Haayin', np.int64(983): 'Roswell', np.int64(984): 'Round Rock', np.int64(985): 'Rowlett', np.int64(986): 'Royal Oak', np.int64(987): 'Ruston', np.int64(988): 'Rutherford', np.int64(989): 'Rutland', np.int64(990): 'Rye', np.int64(991): 'Sacramento', np.int64(992): 'Saddle Brook', np.int64(993): 'Saint George', np.int64(994): 'Saint Helena', np.int64(995): 'Saint Helier', np.int64(996): 'Saint James', np.int64(997): "Saint John's", np.int64(998): 'Saint Louis', np.int64(999): 'Saint Louis Park', np.int64(1000): 'Saint Paul', np.int64(1001): 'Saint Petersburg', np.int64(1002): 'Saint-Herblain', np.int64(1003): 'Saint-Jérôme', np.int64(1004): 'Saint-Laurent', np.int64(1005): 'Salem', np.int64(1006): 'Salinas', np.int64(1007): 'Salt Lake City', np.int64(1008): 'San Antonio', np.int64(1009): 'San Carlos', np.int64(1010): 'San Clemente', np.int64(1011): 'San Diego', np.int64(1012): 'San Dimas', np.int64(1013): 'San Francisco', np.int64(1014): 'San Jose', np.int64(1015): 'San Juan', np.int64(1016): 'San Juan Capistrano', np.int64(1017): 'San Leandro', np.int64(1018): 'San Mateo', np.int64(1019): 'San Rafael', np.int64(1020): 'San Ramon', np.int64(1021): 'Sandton', np.int64(1022): 'Sandusky', np.int64(1023): 'Sankt Gallen', np.int64(1024): 'Santa Ana', np.int64(1025): 'Santa Barbara', np.int64(1026): 'Santa Clara', np.int64(1027): 'Santa Fe', np.int64(1028): 'Santa Monica', np.int64(1029): 'Santa Paula', np.int64(1030): 'Santa Rosa', np.int64(1031): 'Santiago de Chile', np.int64(1032): 'Sarasota', np.int64(1033): 'Saratoga Springs', np.int64(1034): 'Saskatoon', np.int64(1035): 'Savannah', np.int64(1036): 'Saxonburg', np.int64(1037): 'Schaffhausen', np.int64(1038): 'Schaumburg', np.int64(1039): 'Schlieren', np.int64(1040): 'Scottsdale', np.int64(1041): 'Scranton', np.int64(1042): 'Seattle', np.int64(1043): 'Secaucus', np.int64(1044): 'Seguin', np.int64(1045): 'Seneca', np.int64(1046): 'Seneca Falls', np.int64(1047): 'Senningerberg', np.int64(1048): 'Seoul', np.int64(1049): 'Shakopee', np.int64(1050): 'Shanghai', np.int64(1051): 'Sharonville', np.int64(1052): 'Shelton', np.int64(1053): 'Shenzhen', np.int64(1054): 'Sheridan', np.int64(1055): 'Sherman Oaks', np.int64(1056): 'Sheung Wan', np.int64(1057): 'Shirley', np.int64(1058): 'Shoemakersville', np.int64(1059): 'Shoham', np.int64(1060): 'Shoreham', np.int64(1061): 'Shouguang', np.int64(1062): 'Shreveport', np.int64(1063): 'Silver Spring', np.int64(1064): 'Singapore', np.int64(1065): 'Sioux Falls', np.int64(1066): 'Skokie', np.int64(1067): 'Smiths Falls', np.int64(1068): 'Solana Beach', np.int64(1069): 'Solon', np.int64(1070): 'Somerset', np.int64(1071): 'Souderton', np.int64(1072): 'South Bend', np.int64(1073): 'South Jordan', np.int64(1074): 'South Orange', np.int64(1075): 'South Perth', np.int64(1076): 'South Plainfield', np.int64(1077): 'South San Francisco', np.int64(1078): 'Southampton', np.int64(1079): 'Southern Pines', np.int64(1080): 'Southfield', np.int64(1081): 'Southlake', np.int64(1082): 'Southport', np.int64(1083): 'Sparta', np.int64(1084): 'Spartanburg', np.int64(1085): 'Spicewood', np.int64(1086): 'Spokane', np.int64(1087): 'Spokane Valley', np.int64(1088): 'Spring', np.int64(1089): 'Springdale', np.int64(1090): 'Springfield', np.int64(1091): 'Stafford', np.int64(1092): 'Stamford', np.int64(1093): 'Stanford', np.int64(1094): 'Staten Island', np.int64(1095): 'Statesville', np.int64(1096): 'Stavanger', np.int64(1097): 'Steinhausen', np.int64(1098): 'Stockholm', np.int64(1099): 'Stockton-On-Tees', np.int64(1100): 'Stony Brook', np.int64(1101): 'Stoughton', np.int64(1102): 'Strasburg', np.int64(1103): 'Stroudsburg', np.int64(1104): 'Stuart', np.int64(1105): 'Sugar Land', np.int64(1106): 'Suita', np.int64(1107): 'Summit', np.int64(1108): 'Sunbury', np.int64(1109): 'Sunny Isles Beach', np.int64(1110): 'Sunnyvale', np.int64(1111): 'Sunrise', np.int64(1112): 'Sussex', np.int64(1113): 'Suwanee', np.int64(1114): 'Swords', np.int64(1115): 'Sydney', np.int64(1116): 'Sylmar', np.int64(1117): 'São Paulo', np.int64(1118): 'Taber', np.int64(1119): 'Tacoma', np.int64(1120): 'Taipei', np.int64(1121): 'Taipei City', np.int64(1122): 'Taizhou', np.int64(1123): 'Tallahassee', np.int64(1124): 'Tampa', np.int64(1125): 'Tarrytown', np.int64(1126): 'Teaneck', np.int64(1127): 'Tel Aviv', np.int64(1128): 'Tel Aviv-Yafo', np.int64(1129): 'Tempe', np.int64(1130): 'Temple', np.int64(1131): 'Terre Haute', np.int64(1132): 'The Colony', np.int64(1133): 'The Hague', np.int64(1134): 'The Woodlands', np.int64(1135): 'Thomasville', np.int64(1136): 'Thompson Falls', np.int64(1137): 'Thornton', np.int64(1138): 'Thousand Oaks', np.int64(1139): 'Tigard', np.int64(1140): 'Timberville', np.int64(1141): 'Tinton Falls', np.int64(1142): 'Tioga', np.int64(1143): 'Toano', np.int64(1144): 'Toccoa', np.int64(1145): 'Tokyo', np.int64(1146): 'Toledo', np.int64(1147): 'Tomball', np.int64(1148): 'Tontitown', np.int64(1149): 'Topeka', np.int64(1150): 'Toronto', np.int64(1151): 'Torrance', np.int64(1152): 'Traverse City', np.int64(1153): 'Troy', np.int64(1154): 'Tsim Sha Tsui', np.int64(1155): 'Tucker', np.int64(1156): 'Tucson', np.int64(1157): 'Tulsa', np.int64(1158): 'Tupelo', np.int64(1159): 'Turner', np.int64(1160): 'Tustin', np.int64(1161): 'Tyler', np.int64(1162): 'Tysons', np.int64(1163): 'Tysons Corner', np.int64(1164): 'Tübingen', np.int64(1165): 'Uniondale', np.int64(1166): 'Utrecht', np.int64(1167): 'Uxbridge', np.int64(1168): 'Valcourt', np.int64(1169): 'Valencia', np.int64(1170): 'Valley Cottage', np.int64(1171): 'Van Buren', np.int64(1172): 'Van Nuys', np.int64(1173): 'Van Wert', np.int64(1174): 'Vancouver', np.int64(1175): 'Vanderbijlpark', np.int64(1176): 'Vari', np.int64(1177): 'Vaughan', np.int64(1178): 'Veldhoven', np.int64(1179): 'Venice', np.int64(1180): 'Venlo', np.int64(1181): 'Ventura', np.int64(1182): 'Verdun', np.int64(1183): 'Vernon Hills', np.int64(1184): 'Vero Beach', np.int64(1185): 'Victor', np.int64(1186): 'Vienna', np.int64(1187): 'Virginia Beach', np.int64(1188): 'Virginia City', np.int64(1189): 'Vista', np.int64(1190): 'Volga', np.int64(1191): 'Vonore', np.int64(1192): 'Wakefield', np.int64(1193): 'Wall', np.int64(1194): 'Walla Walla', np.int64(1195): 'Walldorf', np.int64(1196): 'Wallingford', np.int64(1197): 'Walnut Creek', np.int64(1198): 'Waltham', np.int64(1199): 'Wan Chai', np.int64(1200): 'Wanchai', np.int64(1201): 'Warren', np.int64(1202): 'Warrendale', np.int64(1203): 'Warrenville', np.int64(1204): 'Warsaw', np.int64(1205): 'Warwick', np.int64(1206): 'Washington', np.int64(1207): 'Washington Township', np.int64(1208): 'Waterloo', np.int64(1209): 'Watertown', np.int64(1210): 'Watford', np.int64(1211): 'Watseka', np.int64(1212): 'Watsonville', np.int64(1213): 'Waukegan', np.int64(1214): 'Waukesha', np.int64(1215): 'Wausau', np.int64(1216): 'Wauwatosa', np.int64(1217): 'Wayne', np.int64(1218): 'Wayzata', np.int64(1219): 'Webster', np.int64(1220): 'Wellsboro', np.int64(1221): 'Wenzhou', np.int64(1222): 'West Chicago', np.int64(1223): 'West Des Moines', np.int64(1224): 'West Fargo', np.int64(1225): 'West Henrietta', np.int64(1226): 'West Hollywood', np.int64(1227): 'West Jordan', np.int64(1228): 'West Lafayette', np.int64(1229): 'West Melbourne', np.int64(1230): 'West Orange', np.int64(1231): 'West Palm Beach', np.int64(1232): 'West Reading', np.int64(1233): 'West Seneca', np.int64(1234): 'West Warwick', np.int64(1235): 'Westborough', np.int64(1236): 'Westbrook', np.int64(1237): 'Westbury', np.int64(1238): 'Westchester', np.int64(1239): 'Westerly', np.int64(1240): 'Westerville', np.int64(1241): 'Westfield', np.int64(1242): 'Westford', np.int64(1243): 'Westlake', np.int64(1244): 'Westlake Village', np.int64(1245): 'Westminster', np.int64(1246): 'Westport', np.int64(1247): 'Weybridge', np.int64(1248): 'Wheaton', np.int64(1249): 'Wheeling', np.int64(1250): 'Whippany', np.int64(1251): 'White Bear Lake', np.int64(1252): 'White Plains', np.int64(1253): 'Whitefish', np.int64(1254): 'Wichita', np.int64(1255): 'Williamsburg', np.int64(1256): 'Williamsport', np.int64(1257): 'Williamsville', np.int64(1258): 'Williston', np.int64(1259): 'Willow Park', np.int64(1260): 'Wilmington', np.int64(1261): 'Winchester', np.int64(1262): 'Windsor', np.int64(1263): 'Windsor Mill', np.int64(1264): 'Winona', np.int64(1265): 'Winston-Salem', np.int64(1266): 'Winter Haven', np.int64(1267): 'Winter Park', np.int64(1268): 'Winter Springs', np.int64(1269): 'Wixom', np.int64(1270): 'Woburn', np.int64(1271): 'Woking', np.int64(1272): 'Wood Dale', np.int64(1273): 'Woodbridge', np.int64(1274): 'Woodbury', np.int64(1275): 'Woodcliff Lake', np.int64(1276): 'Woodland Hills', np.int64(1277): 'Woodland Park', np.int64(1278): 'Woonsocket', np.int64(1279): 'Worcester', np.int64(1280): 'Wyomissing', np.int64(1281): "Xi'an", np.int64(1282): 'Yardley', np.int64(1283): 'Yavne', np.int64(1284): "Yokne'am", np.int64(1285): 'Yokneam Illit', np.int64(1286): 'York', np.int64(1287): 'Yulee', np.int64(1288): 'Zeeland', np.int64(1289): 'Zephyr Cove', np.int64(1290): 'Zug', np.int64(1291): 'Zurich', np.int64(1292): None}

state_mapping = {np.int64(0): 'AB', np.int64(1): 'AK', np.int64(2): 'AL', np.int64(3): 'AR', np.int64(4): 'AZ', np.int64(5): 'BC', np.int64(6): 'CA', np.int64(7): 'CO', np.int64(8): 'CT', np.int64(9): 'DC', np.int64(10): 'DE', np.int64(11): 'FL', np.int64(12): 'GA', np.int64(13): 'HI', np.int64(14): 'IA', np.int64(15): 'ID', np.int64(16): 'IL', np.int64(17): 'IN', np.int64(18): 'JA', np.int64(19): 'KS', np.int64(20): 'KY', np.int64(21): 'LA', np.int64(22): 'MA', np.int64(23): 'MD', np.int64(24): 'ME', np.int64(25): 'MI', np.int64(26): 'MN', np.int64(27): 'MO', np.int64(28): 'MS', np.int64(29): 'MT', np.int64(30): 'NC', np.int64(31): 'ND', np.int64(32): 'NE', np.int64(33): 'NF', np.int64(34): 'NH', np.int64(35): 'NJ', np.int64(36): 'NM', np.int64(37): 'NS', np.int64(38): 'NSW', np.int64(39): 'NV', np.int64(40): 'NY', np.int64(41): 'OH', np.int64(42): 'OK', np.int64(43): 'ON', np.int64(44): 'OR', np.int64(45): 'PA', np.int64(46): 'PD', np.int64(47): 'PR', np.int64(48): 'QC', np.int64(49): 'QLD', np.int64(50): 'RI', np.int64(51): 'RJ', np.int64(52): 'SC', np.int64(53): 'SD', np.int64(54): 'SK', np.int64(55): 'SP', np.int64(56): 'TN', np.int64(57): 'TX', np.int64(58): 'UT', np.int64(59): 'VA', np.int64(60): 'VIC', np.int64(61): 'VT', np.int64(62): 'WA', np.int64(63): 'WI', np.int64(64): 'WV', np.int64(65): 'WY', np.int64(66): None}

country_mapping = {np.int64(0): 'Argentina', np.int64(1): 'Australia', np.int64(2): 'Bahamas', np.int64(3): 'Belgium', np.int64(4): 'Bermuda', np.int64(5): 'Brazil', np.int64(6): 'Canada', np.int64(7): 'Cayman Islands', np.int64(8): 'Chile', np.int64(9): 'China', np.int64(10): 'Colombia', np.int64(11): 'Costa Rica', np.int64(12): 'Cyprus', np.int64(13): 'Denmark', np.int64(14): 'Finland', np.int64(15): 'France', np.int64(16): 'Germany', np.int64(17): 'Greece', np.int64(18): 'Hong Kong', np.int64(19): 'India', np.int64(20): 'Ireland', np.int64(21): 'Israel', np.int64(22): 'Italy', np.int64(23): 'Japan', np.int64(24): 'Jersey', np.int64(25): 'Kazakhstan', np.int64(26): 'Luxembourg', np.int64(27): 'Malaysia', np.int64(28): 'Mexico', np.int64(29): 'Monaco', np.int64(30): 'Netherlands', np.int64(31): 'Norway', np.int64(32): 'Panama', np.int64(33): 'Philippines', np.int64(34): 'Singapore', np.int64(35): 'South Africa', np.int64(36): 'South Korea', np.int64(37): 'Spain', np.int64(38): 'Sweden', np.int64(39): 'Switzerland', np.int64(40): 'Taiwan', np.int64(41): 'Turkey', np.int64(42): 'United Kingdom', np.int64(43): 'United States', np.int64(44): 'Uruguay', np.int64(45): None}

industry_map={np.int64(0): 'Advertising Agencies', np.int64(1): 'Aerospace & Defense', np.int64(2): 'Agricultural Inputs', np.int64(3): 'Airlines', np.int64(4): 'Airports & Air Services', np.int64(5): 'Aluminum', np.int64(6): 'Apparel Manufacturing', np.int64(7): 'Apparel Retail', np.int64(8): 'Asset Management', np.int64(9): 'Auto & Truck Dealerships', np.int64(10): 'Auto Manufacturers', np.int64(11): 'Auto Parts', np.int64(12): 'Banks - Diversified', np.int64(13): 'Banks - Regional', np.int64(14): 'Banks—Diversified', np.int64(15): 'Banks—Regional', np.int64(16): 'Beverages - Brewers', np.int64(17): 'Beverages - Non-Alcoholic', np.int64(18): 'Beverages - Wineries & Distilleries', np.int64(19): 'Beverages—Brewers', np.int64(20): 'Beverages—Non-Alcoholic', np.int64(21): 'Beverages—Wineries & Distilleries', np.int64(22): 'Biotechnology', np.int64(23): 'Broadcasting', np.int64(24): 'Building Materials', np.int64(25): 'Building Products & Equipment', np.int64(26): 'Business Equipment & Supplies', np.int64(27): 'Capital Markets', np.int64(28): 'Chemicals', np.int64(29): 'Coking Coal', np.int64(30): 'Communication Equipment', np.int64(31): 'Computer Hardware', np.int64(32): 'Confectioners', np.int64(33): 'Conglomerates', np.int64(34): 'Consulting Services', np.int64(35): 'Consumer Electronics', np.int64(36): 'Copper', np.int64(37): 'Credit Services', np.int64(38): 'Department Stores', np.int64(39): 'Diagnostics & Research', np.int64(40): 'Discount Stores', np.int64(41): 'Drug Manufacturers - General', np.int64(42): 'Drug Manufacturers - Specialty & Generic', np.int64(43): 'Drug Manufacturers—General', np.int64(44): 'Drug Manufacturers—Specialty & Generic', np.int64(45): 'Education & Training Services', np.int64(46): 'Electrical Equipment & Parts', np.int64(47): 'Electronic Components', np.int64(48): 'Electronic Gaming & Multimedia', np.int64(49): 'Electronics & Computer Distribution', np.int64(50): 'Engineering & Construction', np.int64(51): 'Entertainment', np.int64(52): 'Farm & Heavy Construction Machinery', np.int64(53): 'Farm Products', np.int64(54): 'Financial Conglomerates', np.int64(55): 'Financial Data & Stock Exchanges', np.int64(56): 'Food Distribution', np.int64(57): 'Footwear & Accessories', np.int64(58): 'Furnishings, Fixtures & Appliances', np.int64(59): 'Gambling', np.int64(60): 'Gold', np.int64(61): 'Grocery Stores', np.int64(62): 'Health Information Services', np.int64(63): 'Healthcare Plans', np.int64(64): 'Home Improvement Retail', np.int64(65): 'Household & Personal Products', np.int64(66): 'Independent Oil & Gas', np.int64(67): 'Industrial Distribution', np.int64(68): 'Information Technology Services', np.int64(69): 'Infrastructure Operations', np.int64(70): 'Insurance - Diversified', np.int64(71): 'Insurance - Life', np.int64(72): 'Insurance - Property & Casualty', np.int64(73): 'Insurance - Reinsurance', np.int64(74): 'Insurance - Specialty', np.int64(75): 'Insurance Brokers', np.int64(76): 'Insurance—Diversified', np.int64(77): 'Insurance—Life', np.int64(78): 'Insurance—Property & Casualty', np.int64(79): 'Insurance—Reinsurance', np.int64(80): 'Insurance—Specialty', np.int64(81): 'Integrated Freight & Logistics', np.int64(82): 'Internet Content & Information', np.int64(83): 'Internet Retail', np.int64(84): 'Leisure', np.int64(85): 'Lodging', np.int64(86): 'Lumber & Wood Production', np.int64(87): 'Luxury Goods', np.int64(88): 'Marine Shipping', np.int64(89): 'Medical Care Facilities', np.int64(90): 'Medical Devices', np.int64(91): 'Medical Distribution', np.int64(92): 'Medical Instruments & Supplies', np.int64(93): 'Metal Fabrication', np.int64(94): 'Mortgage Finance', np.int64(95): 'Oil & Gas Drilling', np.int64(96): 'Oil & Gas E&P', np.int64(97): 'Oil & Gas Equipment & Services', np.int64(98): 'Oil & Gas Integrated', np.int64(99): 'Oil & Gas Midstream', np.int64(100): 'Oil & Gas Refining & Marketing', np.int64(101): 'Other Industrial Metals & Mining', np.int64(102): 'Other Precious Metals & Mining', np.int64(103): 'Packaged Foods', np.int64(104): 'Packaging & Containers', np.int64(105): 'Paper & Paper Products', np.int64(106): 'Personal Services', np.int64(107): 'Pharmaceutical Retailers', np.int64(108): 'Pollution & Treatment Controls', np.int64(109): 'Publishing', np.int64(110): 'REIT - Diversified', np.int64(111): 'REIT - Healthcare Facilities', np.int64(112): 'REIT - Hotel & Motel', np.int64(113): 'REIT - Industrial', np.int64(114): 'REIT - Mortgage', np.int64(115): 'REIT - Office', np.int64(116): 'REIT - Residential', np.int64(117): 'REIT - Retail', np.int64(118): 'REIT - Specialty', np.int64(119): 'REIT—Diversified', np.int64(120): 'REIT—Healthcare Facilities', np.int64(121): 'REIT—Hotel & Motel', np.int64(122): 'REIT—Industrial', np.int64(123): 'REIT—Mortgage', np.int64(124): 'REIT—Office', np.int64(125): 'REIT—Residential', np.int64(126): 'REIT—Retail', np.int64(127): 'REIT—Specialty', np.int64(128): 'Railroads', np.int64(129): 'Real Estate - Development', np.int64(130): 'Real Estate - Diversified', np.int64(131): 'Real Estate Services', np.int64(132): 'Real Estate—Development', np.int64(133): 'Real Estate—Diversified', np.int64(134): 'Recreational Vehicles', np.int64(135): 'Rental & Leasing Services', np.int64(136): 'Residential Construction', np.int64(137): 'Resorts & Casinos', np.int64(138): 'Restaurants', np.int64(139): 'Scientific & Technical Instruments', np.int64(140): 'Security & Protection Services', np.int64(141): 'Semiconductor Equipment & Materials', np.int64(142): 'Semiconductors', np.int64(143): 'Shell Companies', np.int64(144): 'Silver', np.int64(145): 'Software - Application', np.int64(146): 'Software - Infrastructure', np.int64(147): 'Software—Application', np.int64(148): 'Software—Infrastructure', np.int64(149): 'Solar', np.int64(150): 'Specialty Business Services', np.int64(151): 'Specialty Chemicals', np.int64(152): 'Specialty Industrial Machinery', np.int64(153): 'Specialty Retail', np.int64(154): 'Staffing & Employment Services', np.int64(155): 'Steel', np.int64(156): 'Telecom Services', np.int64(157): 'Textile Manufacturing', np.int64(158): 'Thermal Coal', np.int64(159): 'Tobacco', np.int64(160): 'Tools & Accessories', np.int64(161): 'Travel Services', np.int64(162): 'Trucking', np.int64(163): 'Uranium', np.int64(164): 'Utilities - Regulated Electric', np.int64(165): 'Utilities - Regulated Gas', np.int64(166): 'Utilities - Regulated Water', np.int64(167): 'Utilities - Renewable', np.int64(168): 'Utilities—Diversified', np.int64(169): 'Utilities—Independent Power Producers', np.int64(170): 'Utilities—Regulated Electric', np.int64(171): 'Utilities—Regulated Gas', np.int64(172): 'Utilities—Regulated Water', np.int64(173): 'Utilities—Renewable', np.int64(174): 'Waste Management', np.int64(175): None}
sector_map={np.int64(0): 'Basic Materials', np.int64(1): 'Communication Services', np.int64(2): 'Consumer Cyclical', np.int64(3): 'Consumer Defensive', np.int64(4): 'Energy', np.int64(5): 'Financial Services', np.int64(6): 'Healthcare', np.int64(7): 'Industrials', np.int64(8): 'Real Estate', np.int64(9): 'Technology', np.int64(10): 'Utilities', np.int64(11): None}


city_list = list(city_mapping.values())
state_list = list(state_mapping.values())
country_list = list(country_mapping.values())
industry_list = list(industry_map.values())
sector_list = list(sector_map.values())
feature_names = [
    'market_cap', 'total_revenue', 'cashflow', 'profit_margin',
    'gross_margin', 'total_debt', 'earningsGrowth', 'Gross Profit',
    'Net Income', 'gross_margin', 'profit_margin', 'cashflow', 
    'total_debt', 'totalCash'
]
def predict(input_data):
    reshaped_input = np.array(list(input_data.values())).reshape(1, -1)
    
    prediction = mlmodel.predict(reshaped_input)
    return prediction


# # Function to make predictions for the first model
# def predict(input_data):
#     reshaped_input = np.array(list(input_data.values())).reshape(1, -1)
#     prediction = model.predict(reshaped_input)
#     return prediction

# UI begins here
# Display image at the top

menu = st.sidebar.radio("Navigation", ['Overview',"Stock Price Prediction","Company Performance Prediction","Interactive Visualizations","Upload and Analyze Data"])

if menu == "Company Performance Prediction":
    st.title("Company Performance Prediction")

    st.write("Enter the details below:")
    use_defaults = st.checkbox("Use Default Values")

    if use_defaults:
        input_data = {
            "city": 840, "state": 42, "country": 43, "industry": 170, "sector": 10,
            "recommendationKey": 1, "fullTimeEmployees": 2329.0, "overallRisk": 2.0,
            "payoutRatio": 0.8683, "volume": 1163609.0, "averageVolume": 1052685.0,
            "averageVolume10days": 1635750.0, "averageDailyVolume10Day": 1635750.0,
            "fiftyDayAverage": 40.846, "currency": 0, "enterpriseValue": 13857059840.0,
            "totalCashPerShare": 0.049, "revenueGrowth": 0.021, "operatingMargins": 0.32619,
            "Year": 2022, "EBITDA": 1420500000.0, "EBIT": 959600000.0, "Total Expenses": 2722200000.0,
            "Profit": 959600000.0, "Total Profit": 1625300000.0, "Cash Flow": 952400000.0,
            "Employees": 2329.0, "ebitda": 1169900032.0, "ebitdaMargins": 0.41909,
            "totalAssets": 101958912.0, "threeYearAverageReturn": 0.015469199,
            "fiveYearAverageReturn": 0.061890602, "dividend_yield": 0.8647
        }
    else:
        col1, col2 = st.columns(2)
        with col1:
            city = st.selectbox("City", list(city_mapping.values()))
            state = st.selectbox("State", list(state_mapping.values()))
            country = st.selectbox("Country", list(country_mapping.values()))
            industry = st.selectbox("Industry", list(industry_map.values()))
            sector = st.selectbox("Sector", list(sector_map.values()))
            fullTimeEmployees = st.number_input("Full Time Employees", min_value=0)
            volume = st.number_input("Volume", min_value=0)
            currency = st.text_input("Currency")

        with col2:
            enterpriseValue = st.number_input("Enterprise Value", min_value=0.0)
            operatingMargins = st.number_input("Operating Margins", min_value=0.0)
            year = st.number_input("Year", min_value=1900, max_value=2100)
            netIncome = st.number_input("Net Income", min_value=0.0)
            ebitda = st.number_input("EBITDA", min_value=0.0)
            totalExpenses = st.number_input("Total Expenses", min_value=0.0)
            grossProfit = st.number_input("Gross Profit", min_value=0.0)
            profit = st.number_input("Profit", min_value=0.0)
            totalProfit = st.number_input("Total Profit", min_value=0.0)
            cashFlow = st.number_input("Cash Flow", min_value=0.0)
            totalDebt = st.number_input("Total Debt", min_value=0.0)
            totalAssets = st.number_input("Total Assets", min_value=0.0)

        input_data = {
            "city": 4, "state": 7, "country": 1, "industry": 5, "sector": 1,
            "fullTimeEmployees": fullTimeEmployees, "overallRisk": 0, "payoutRatio": 0.5,
            "volume": volume, "averageVolume": 0, "averageVolume10days": 0,
            "averageDailyVolume10Day": 0, "fiftyDayAverage": 0, "currency": 5,
            "enterpriseValue": enterpriseValue, "totalCashPerShare": 0, "earningsGrowth": 0,
            "revenueGrowth": 0, "operatingMargins": operatingMargins, "year": year, "ebitda": ebitda,
            "ebit": 1, "totalExpenses": totalExpenses, "grossProfit": grossProfit, "profit": profit,
            "totalProfit": totalProfit, "cashFlow": cashFlow, "employees": 0, "ebitdaMargins": 0,
            "totalAssets": totalAssets, "threeYearAverageReturn": 0, "fiveYearAverageReturn": 0,
            "dividendYield": 0
        }

    if st.button("Predict"):
        prediction = predict(input_data)
        output_dict = dict(zip(feature_names, prediction[0]))
        st.write("Mapped Prediction Output:", output_dict)

elif menu == "Stock Price Prediction":
    st.title("Stock Price Prediction")

    model_choice = st.selectbox('Select Model', ['Linear Regression', 'Random Forest'])

    col1, col2, col3 = st.columns(3)
    with col1:
        open_price = st.number_input('Open Price')
        volume = st.number_input('Volume')

    with col2:
        high_price = st.number_input('High Price')
        dividends = st.number_input('Dividends')

    with col3:
        low_price = st.number_input('Low Price')
        stock_splits = st.number_input('Stock Splits')

    price_change = open_price - high_price
    volatility = high_price - low_price

    input_data = np.array([[open_price, high_price, low_price, volume, dividends, stock_splits, price_change, volatility]])

    if st.button('Predict'):
        if model_choice == 'Linear Regression':
            prediction = linear_reg_model.predict(input_data)
        elif model_choice == 'Random Forest':
            prediction = random_forest_model.predict(input_data)
        
        st.write(f"The predicted close price for next day is: {prediction[0]}")

        # elif menu == "overview":
#     # Tableau embed URLs for the respective visualizations
#     tableau_dashboard_url_1 = "https://public.tableau.com/app/profile/aditya.chache/viz/datathon_vizzes/Sheet7"

#     tableau_dashboard_url = "https://public.tableau.com/views/datathon_vizzes/Sheet7?:embed=y&:showVizHome=no"

#     # Embed the Tableau visualization
#     components.iframe(tableau_dashboard_url, width=500, height=500)

#     st.caption("Volume of stocks traded in 5 years")  # Optional caption

elif menu == "Interactive Visualizations":
    st.header("Dynamic and Interactive Tableau Visualizations")

    volume_vs_stock_linegraph = "https://public.tableau.com/views/datathon_vizzes/Sheet7?:embed=y&:showVizHome=no"
    top_10_industries = "https://public.tableau.com/views/datathon_vizzes/Sheet6?:embed=y&:showVizHome=no"
    volume_by_location = "https://public.tableau.com/views/datathon_vizzes/Sheet9?:embed=y&:showVizHome=no"
    top_10_volatile_stocks = "https://public.tableau.com/views/datathon_vizzes/Sheet11?:embed=y&:showVizHome=no"
    avg_volatility = "https://public.tableau.com/views/datathon_vizzes/Sheet12?:embed=y&:showVizHome=no"


    components.iframe(volume_vs_stock_linegraph, width=500, height=500)
    st.caption("Market Movement Through Trading Volume") 

    components.iframe(top_10_industries, width=500, height=500)
    st.caption("Top 10 industries by volume") 

    components.iframe(volume_by_location, width=500, height=500)
    st.caption("Total volume of stocks traded by location") 

    components.iframe(top_10_volatile_stocks, width=500, height=500)
    st.caption("Top 10 volatile stocks") 

    components.iframe(avg_volatility, width=500, height=500)
    st.caption("Average volatility across 5 years") 


elif menu == "Upload and Analyze Data":
    st.header("Upload and Analyze Financial Data")
    uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])
    
    if uploaded_file:
        # Read the uploaded CSV
        data = pd.read_csv(uploaded_file)
        st.write("Uploaded Data Preview:", data.head())
        data_string = data[:200].to_string(index=False)

        # Context for Generative AI
        context = f"""
        You are the Finance Head of a company. I have provided a dataset below that contains financial data, including revenue, expenses, profit margins, operational costs, and other relevant metrics. Your task is to analyze this data and provide insights and recommendations. and give me concise data
        ### Dataset:
        {data_string}
        """
        
        # Generate insights
        response = model.generate_content([context])
        st.subheader("AI-Generated Insights:")
        st.write(response.text)
        
        # Follow-up questions
        # question = "Give me top 3 companies in which i should invest"
        # query = f"{context}\n\n### Question: {question}"
        # follow_up_response = model.generate_content([query])
        # st.subheader("Top 3 Companies with High Profits:")
        # st.write(follow_up_response.text)
        user_question = st.text_input("Ask a financial question about the dataset")
        
        if user_question:
            query = f"{context}\n\n### Question: {user_question}"
            follow_up_response = model.generate_content([query])
            st.subheader(f"Response to: {user_question}")
            st.write(follow_up_response.text)
    else:
        st.info("Please upload a CSV file to proceed.")

elif menu == "Overview":

    # Overview Section
    st.title("Stock Spectrum: AI-Assisted Business Valuation Tool")

    st.markdown("""
    **Overview:**

    Stock Spectrum is an AI-powered tool designed to simplify the process of understanding company stocks. Developed during **Datathon 1.0** in the **finance track**, the tool offers an intuitive way to analyze and predict stock prices and company performance. Using historical data, machine learning models, and advanced AI insights, Stock Spectrum aims to make financial analysis accessible to all users, regardless of their background.

    ### Key Features:
    1. **Interactive Visualizations**: Using **Tableau**, our tool visualizes stock data and performance metrics in a user-friendly and interactive manner.
    2. **Stock Price Prediction**: Trained models (Linear Regression, Random Forest) predict stock prices for the next day and company performance metrics.
    3. **AI-Assisted Insights**: Powered by **Google Gemini LLM**, the tool provides AI-driven insights, helping users analyze uploaded data and generate actionable insights.
    4. **User-Friendly Interface**: Built with **Streamlit**, the app offers a seamless and interactive interface for users to explore financial data.

    ### How It Works:
    1. **Upload Data**: Users can upload CSV files containing company data.
    2. **Data Analysis**: Python scripts process the uploaded data, applying machine learning models to predict stock prices and other metrics.
    3. **Visualizations & Insights**: Tableau dashboards display the results, and Google Gemini provides AI-assisted insights to help users understand the data better.

    ### Technologies Used:
    - **Streamlit**: Web app development
    - **Python**: Data analysis and machine learning
    - **Tableau**: Interactive visualizations
    - **Google Gemini**: AI-driven insights

    **Try it out** and explore how AI and machine learning can assist in making sense of complex financial data.
    """)


